source:
  apiVersion: "raw.import.deform.io/v1alpha1"
  kind: AwsIamRole
target:
  apiVersion: identity.aws.crossplane.io/v1beta1
  kind: IAMRole
imports:
- from: "spec.arn"
  to: "metadata.annotations['import.deform.io/arn']"

- from: "spec.create_date"
  to: "metadata.annotations['import.deform.io/create_date']"
- from: "spec.unique_id"
  to: "metadata.annotations['import.deform.io/unique_id']"

- from: "spec.assume_role_policy"
  to: "spec.forProvider.assumeRolePolicyDocument"
- from: "spec.description"
  to: "spec.forProvider.description"
- from: "spec.max_session_duration"
  to: "spec.forProvider.maxSessionDuration"
- from: "spec.path"
  to: "spec.forProvider.path"
exports:
- from: "spec.arn"
  at: "status.atProvider.arn"
#XXX CHECK- from: "spec.unique_id"
#  at: "spec.atProvider.roleID"
- from: "spec.tags"
  to: "spec.forProvider.tags"

########
# TODO: -from: "spec.managed_policy_arns.0"
#
###### TODO: createChildren concept
#- from: "spec.inline_policy[0]" #TODO: iterate over all
#  createChildren:
#  - kind: IAMPolicy
#    apiVersion: identity.aws.crossplane.io/v1alpha1
#    metadata:
#      name: {{ .name }} ### XXX Hmmm?
#    spec:
#      forProvider:
#        name: {{ .name }} # required
#        document: {{ .policy }} # required
#  - kind: IAMRolePolicyAttachment
#    apiVersion: identity.aws.crossplane.io/v1beta1
#    metadata:
#      name: {{ .name }}
#    spec:
#      forProvider:
#        policyArn: ## XXX obtain from above sibling
#        # - or (better?) use policyArnSelector and set unique labels (on both)
#        roleName: $metadata.name #XXX ref to parent
